import {
  createSubscriber,
  increment,
  writable
} from "./chunk-UGMRQMIP.js";
import {
  linear
} from "./chunk-6HQCH3VS.js";
import {
  loop,
  raf
} from "./chunk-DREPW4PI.js";
import "./chunk-AJTCXCUR.js";
import {
  deferred,
  get,
  noop,
  on,
  render_effect,
  set,
  source,
  true_default
} from "./chunk-3I5WX7QU.js";
import "./chunk-633S47UX.js";
import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __superGet
} from "./chunk-DA6J34JX.js";

// node_modules/svelte/src/reactivity/set.js
var read_methods = ["forEach", "isDisjointFrom", "isSubsetOf", "isSupersetOf"];
var set_like_methods = ["difference", "intersection", "symmetricDifference", "union"];
var inited = false;
var _sources, _version, _size, _init, init_fn;
var _SvelteSet = class _SvelteSet extends Set {
  /**
   * @param {Iterable<T> | null | undefined} [value]
   */
  constructor(value) {
    super();
    // We init as part of the first instance so that we can treeshake this class
    __privateAdd(this, _init);
    /** @type {Map<T, Source<boolean>>} */
    __privateAdd(this, _sources, /* @__PURE__ */ new Map());
    __privateAdd(this, _version, source(0));
    __privateAdd(this, _size, source(0));
    if (true_default)
      value = new Set(value);
    if (value) {
      for (var element of value) {
        super.add(element);
      }
      __privateGet(this, _size).v = super.size;
    }
    if (!inited)
      __privateMethod(this, _init, init_fn).call(this);
  }
  /** @param {T} value */
  has(value) {
    var has = super.has(value);
    var sources = __privateGet(this, _sources);
    var s = sources.get(value);
    if (s === void 0) {
      if (!has) {
        get(__privateGet(this, _version));
        return false;
      }
      s = source(true);
      sources.set(value, s);
    }
    get(s);
    return has;
  }
  /** @param {T} value */
  add(value) {
    if (!super.has(value)) {
      super.add(value);
      set(__privateGet(this, _size), super.size);
      increment(__privateGet(this, _version));
    }
    return this;
  }
  /** @param {T} value */
  delete(value) {
    var deleted = super.delete(value);
    var sources = __privateGet(this, _sources);
    var s = sources.get(value);
    if (s !== void 0) {
      sources.delete(value);
      set(s, false);
    }
    if (deleted) {
      set(__privateGet(this, _size), super.size);
      increment(__privateGet(this, _version));
    }
    return deleted;
  }
  clear() {
    if (super.size === 0) {
      return;
    }
    super.clear();
    var sources = __privateGet(this, _sources);
    for (var s of sources.values()) {
      set(s, false);
    }
    sources.clear();
    set(__privateGet(this, _size), 0);
    increment(__privateGet(this, _version));
  }
  keys() {
    return this.values();
  }
  values() {
    get(__privateGet(this, _version));
    return super.values();
  }
  entries() {
    get(__privateGet(this, _version));
    return super.entries();
  }
  [Symbol.iterator]() {
    return this.keys();
  }
  get size() {
    return get(__privateGet(this, _size));
  }
};
_sources = new WeakMap();
_version = new WeakMap();
_size = new WeakMap();
_init = new WeakSet();
init_fn = function() {
  inited = true;
  var proto = _SvelteSet.prototype;
  var set_proto = Set.prototype;
  for (const method of read_methods) {
    proto[method] = function(...v) {
      get(__privateGet(this, _version));
      return set_proto[method].apply(this, v);
    };
  }
  for (const method of set_like_methods) {
    proto[method] = function(...v) {
      get(__privateGet(this, _version));
      var set2 = (
        /** @type {Set<T>} */
        set_proto[method].apply(this, v)
      );
      return new _SvelteSet(set2);
    };
  }
};
var SvelteSet = _SvelteSet;

// node_modules/svelte/src/reactivity/map.js
var _sources2, _version2, _size2, _read_all, read_all_fn;
var _SvelteMap = class _SvelteMap extends Map {
  /**
   * @param {Iterable<readonly [K, V]> | null | undefined} [value]
   */
  constructor(value) {
    super();
    __privateAdd(this, _read_all);
    /** @type {Map<K, Source<number>>} */
    __privateAdd(this, _sources2, /* @__PURE__ */ new Map());
    __privateAdd(this, _version2, source(0));
    __privateAdd(this, _size2, source(0));
    if (true_default)
      value = new Map(value);
    if (value) {
      for (var [key, v] of value) {
        super.set(key, v);
      }
      __privateGet(this, _size2).v = super.size;
    }
  }
  /** @param {K} key */
  has(key) {
    var sources = __privateGet(this, _sources2);
    var s = sources.get(key);
    if (s === void 0) {
      var ret = super.get(key);
      if (ret !== void 0) {
        s = source(0);
        sources.set(key, s);
      } else {
        get(__privateGet(this, _version2));
        return false;
      }
    }
    get(s);
    return true;
  }
  /**
   * @param {(value: V, key: K, map: Map<K, V>) => void} callbackfn
   * @param {any} [this_arg]
   */
  forEach(callbackfn, this_arg) {
    __privateMethod(this, _read_all, read_all_fn).call(this);
    super.forEach(callbackfn, this_arg);
  }
  /** @param {K} key */
  get(key) {
    var sources = __privateGet(this, _sources2);
    var s = sources.get(key);
    if (s === void 0) {
      var ret = super.get(key);
      if (ret !== void 0) {
        s = source(0);
        sources.set(key, s);
      } else {
        get(__privateGet(this, _version2));
        return void 0;
      }
    }
    get(s);
    return super.get(key);
  }
  /**
   * @param {K} key
   * @param {V} value
   * */
  set(key, value) {
    var _a;
    var sources = __privateGet(this, _sources2);
    var s = sources.get(key);
    var prev_res = super.get(key);
    var res = super.set(key, value);
    var version = __privateGet(this, _version2);
    if (s === void 0) {
      sources.set(key, source(0));
      set(__privateGet(this, _size2), super.size);
      increment(version);
    } else if (prev_res !== value) {
      increment(s);
      var v_reactions = version.reactions === null ? null : new Set(version.reactions);
      var needs_version_increase = v_reactions === null || !((_a = s.reactions) == null ? void 0 : _a.every(
        (r) => (
          /** @type {NonNullable<typeof v_reactions>} */
          v_reactions.has(r)
        )
      ));
      if (needs_version_increase) {
        increment(version);
      }
    }
    return res;
  }
  /** @param {K} key */
  delete(key) {
    var sources = __privateGet(this, _sources2);
    var s = sources.get(key);
    var res = super.delete(key);
    if (s !== void 0) {
      sources.delete(key);
      set(__privateGet(this, _size2), super.size);
      set(s, -1);
      increment(__privateGet(this, _version2));
    }
    return res;
  }
  clear() {
    if (super.size === 0) {
      return;
    }
    super.clear();
    var sources = __privateGet(this, _sources2);
    set(__privateGet(this, _size2), 0);
    for (var s of sources.values()) {
      set(s, -1);
    }
    increment(__privateGet(this, _version2));
    sources.clear();
  }
  keys() {
    get(__privateGet(this, _version2));
    return super.keys();
  }
  values() {
    __privateMethod(this, _read_all, read_all_fn).call(this);
    return super.values();
  }
  entries() {
    __privateMethod(this, _read_all, read_all_fn).call(this);
    return super.entries();
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  get size() {
    get(__privateGet(this, _size2));
    return super.size;
  }
};
_sources2 = new WeakMap();
_version2 = new WeakMap();
_size2 = new WeakMap();
_read_all = new WeakSet();
read_all_fn = function() {
  get(__privateGet(this, _version2));
  var sources = __privateGet(this, _sources2);
  if (__privateGet(this, _size2).v !== sources.size) {
    for (var key of __superGet(_SvelteMap.prototype, this, "keys").call(this)) {
      if (!sources.has(key)) {
        sources.set(key, source(0));
      }
    }
  }
  for (var [, s] of __privateGet(this, _sources2)) {
    get(s);
  }
};
var SvelteMap = _SvelteMap;

// node_modules/svelte/src/reactivity/url-search-params.js
var REPLACE = Symbol();
var _version3, _url, _updating, _update_url, update_url_fn;
var SvelteURLSearchParams = class extends URLSearchParams {
  constructor() {
    super(...arguments);
    __privateAdd(this, _update_url);
    __privateAdd(this, _version3, source(0));
    __privateAdd(this, _url, get_current_url());
    __privateAdd(this, _updating, false);
  }
  /**
   * @param {URLSearchParams} params
   */
  [REPLACE](params) {
    if (__privateGet(this, _updating))
      return;
    __privateSet(this, _updating, true);
    for (const key of [...super.keys()]) {
      super.delete(key);
    }
    for (const [key, value] of params) {
      super.append(key, value);
    }
    increment(__privateGet(this, _version3));
    __privateSet(this, _updating, false);
  }
  /**
   * @param {string} name
   * @param {string} value
   * @returns {void}
   */
  append(name, value) {
    super.append(name, value);
    __privateMethod(this, _update_url, update_url_fn).call(this);
    increment(__privateGet(this, _version3));
  }
  /**
   * @param {string} name
   * @param {string=} value
   * @returns {void}
   */
  delete(name, value) {
    var has_value = super.has(name, value);
    super.delete(name, value);
    if (has_value) {
      __privateMethod(this, _update_url, update_url_fn).call(this);
      increment(__privateGet(this, _version3));
    }
  }
  /**
   * @param {string} name
   * @returns {string|null}
   */
  get(name) {
    get(__privateGet(this, _version3));
    return super.get(name);
  }
  /**
   * @param {string} name
   * @returns {string[]}
   */
  getAll(name) {
    get(__privateGet(this, _version3));
    return super.getAll(name);
  }
  /**
   * @param {string} name
   * @param {string=} value
   * @returns {boolean}
   */
  has(name, value) {
    get(__privateGet(this, _version3));
    return super.has(name, value);
  }
  keys() {
    get(__privateGet(this, _version3));
    return super.keys();
  }
  /**
   * @param {string} name
   * @param {string} value
   * @returns {void}
   */
  set(name, value) {
    var previous = super.getAll(name).join("");
    super.set(name, value);
    if (previous !== super.getAll(name).join("")) {
      __privateMethod(this, _update_url, update_url_fn).call(this);
      increment(__privateGet(this, _version3));
    }
  }
  sort() {
    super.sort();
    __privateMethod(this, _update_url, update_url_fn).call(this);
    increment(__privateGet(this, _version3));
  }
  toString() {
    get(__privateGet(this, _version3));
    return super.toString();
  }
  values() {
    get(__privateGet(this, _version3));
    return super.values();
  }
  entries() {
    get(__privateGet(this, _version3));
    return super.entries();
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  get size() {
    get(__privateGet(this, _version3));
    return super.size;
  }
};
_version3 = new WeakMap();
_url = new WeakMap();
_updating = new WeakMap();
_update_url = new WeakSet();
update_url_fn = function() {
  if (!__privateGet(this, _url) || __privateGet(this, _updating))
    return;
  __privateSet(this, _updating, true);
  const search = this.toString();
  __privateGet(this, _url).search = search && `?${search}`;
  __privateSet(this, _updating, false);
};

// node_modules/svelte/src/reactivity/url.js
var current_url = null;
function get_current_url() {
  return current_url;
}

// node_modules/svelte/src/reactivity/reactive-value.js
var _fn, _subscribe;
var ReactiveValue = class {
  /**
   *
   * @param {() => T} fn
   * @param {(update: () => void) => void} onsubscribe
   */
  constructor(fn, onsubscribe) {
    __privateAdd(this, _fn, void 0);
    __privateAdd(this, _subscribe, void 0);
    __privateSet(this, _fn, fn);
    __privateSet(this, _subscribe, createSubscriber(onsubscribe));
  }
  get current() {
    __privateGet(this, _subscribe).call(this);
    return __privateGet(this, _fn).call(this);
  }
};
_fn = new WeakMap();
_subscribe = new WeakMap();

// node_modules/svelte/src/reactivity/media-query.js
var parenthesis_regex = /\(.+\)/;
var MediaQuery = class extends ReactiveValue {
  /**
   * @param {string} query A media query string
   * @param {boolean} [fallback] Fallback value for the server
   */
  constructor(query, fallback) {
    let final_query = parenthesis_regex.test(query) ? query : `(${query})`;
    const q = window.matchMedia(final_query);
    super(
      () => q.matches,
      (update) => on(q, "change", update)
    );
  }
};

// node_modules/svelte/src/motion/utils.js
function is_date(obj) {
  return Object.prototype.toString.call(obj) === "[object Date]";
}

// node_modules/svelte/src/motion/spring.js
function tick_spring(ctx, last_value, current_value, target_value) {
  if (typeof current_value === "number" || is_date(current_value)) {
    const delta = target_value - current_value;
    const velocity = (current_value - last_value) / (ctx.dt || 1 / 60);
    const spring2 = ctx.opts.stiffness * delta;
    const damper = ctx.opts.damping * velocity;
    const acceleration = (spring2 - damper) * ctx.inv_mass;
    const d = (velocity + acceleration) * ctx.dt;
    if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
      return target_value;
    } else {
      ctx.settled = false;
      return is_date(current_value) ? new Date(current_value.getTime() + d) : current_value + d;
    }
  } else if (Array.isArray(current_value)) {
    return current_value.map(
      (_, i) => (
        // @ts-ignore
        tick_spring(ctx, last_value[i], current_value[i], target_value[i])
      )
    );
  } else if (typeof current_value === "object") {
    const next_value = {};
    for (const k in current_value) {
      next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
    }
    return next_value;
  } else {
    throw new Error(`Cannot spring ${typeof current_value} values`);
  }
}
function spring(value, opts = {}) {
  const store = writable(value);
  const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
  let last_time;
  let task;
  let current_token;
  let last_value = (
    /** @type {T} */
    value
  );
  let target_value = (
    /** @type {T | undefined} */
    value
  );
  let inv_mass = 1;
  let inv_mass_recovery_rate = 0;
  let cancel_task = false;
  function set2(new_value, opts2 = {}) {
    target_value = new_value;
    const token = current_token = {};
    if (value == null || opts2.hard || spring2.stiffness >= 1 && spring2.damping >= 1) {
      cancel_task = true;
      last_time = raf.now();
      last_value = new_value;
      store.set(value = target_value);
      return Promise.resolve();
    } else if (opts2.soft) {
      const rate = opts2.soft === true ? 0.5 : +opts2.soft;
      inv_mass_recovery_rate = 1 / (rate * 60);
      inv_mass = 0;
    }
    if (!task) {
      last_time = raf.now();
      cancel_task = false;
      task = loop((now) => {
        if (cancel_task) {
          cancel_task = false;
          task = null;
          return false;
        }
        inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
        const ctx = {
          inv_mass,
          opts: spring2,
          settled: true,
          dt: (now - last_time) * 60 / 1e3
        };
        const next_value = tick_spring(ctx, last_value, value, target_value);
        last_time = now;
        last_value = /** @type {T} */
        value;
        store.set(value = /** @type {T} */
        next_value);
        if (ctx.settled) {
          task = null;
        }
        return !ctx.settled;
      });
    }
    return new Promise((fulfil) => {
      task.promise.then(() => {
        if (token === current_token)
          fulfil();
      });
    });
  }
  const spring2 = {
    set: set2,
    update: (fn, opts2) => set2(fn(
      /** @type {T} */
      target_value,
      /** @type {T} */
      value
    ), opts2),
    subscribe: store.subscribe,
    stiffness,
    damping,
    precision
  };
  return spring2;
}
var _stiffness, _damping, _precision, _current, _target, _last_value, _last_time, _inverse_mass, _momentum, _task, _deferred, _update, update_fn;
var _Spring = class _Spring {
  /**
   * @param {T} value
   * @param {SpringOpts} [options]
   */
  constructor(value, options = {}) {
    /** @param {T} value */
    __privateAdd(this, _update);
    __privateAdd(this, _stiffness, source(0.15));
    __privateAdd(this, _damping, source(0.8));
    __privateAdd(this, _precision, source(0.01));
    __privateAdd(this, _current, source(
      /** @type {T} */
      void 0
    ));
    __privateAdd(this, _target, source(
      /** @type {T} */
      void 0
    ));
    __privateAdd(
      this,
      _last_value,
      /** @type {T} */
      void 0
    );
    __privateAdd(this, _last_time, 0);
    __privateAdd(this, _inverse_mass, 1);
    __privateAdd(this, _momentum, 0);
    /** @type {import('../internal/client/types').Task | null} */
    __privateAdd(this, _task, null);
    /** @type {ReturnType<typeof deferred> | null} */
    __privateAdd(this, _deferred, null);
    __privateGet(this, _current).v = __privateGet(this, _target).v = value;
    if (typeof options.stiffness === "number")
      __privateGet(this, _stiffness).v = clamp(options.stiffness, 0, 1);
    if (typeof options.damping === "number")
      __privateGet(this, _damping).v = clamp(options.damping, 0, 1);
    if (typeof options.precision === "number")
      __privateGet(this, _precision).v = options.precision;
  }
  /**
   * Create a spring whose value is bound to the return value of `fn`. This must be called
   * inside an effect root (for example, during component initialisation).
   *
   * ```svelte
   * <script>
   * 	import { Spring } from 'svelte/motion';
   *
   * 	let { number } = $props();
   *
   * 	const spring = Spring.of(() => number);
   * <\/script>
   * ```
   * @template U
   * @param {() => U} fn
   * @param {SpringOpts} [options]
   */
  static of(fn, options) {
    const spring2 = new _Spring(fn(), options);
    render_effect(() => {
      spring2.set(fn());
    });
    return spring2;
  }
  /**
   * Sets `spring.target` to `value` and returns a `Promise` that resolves if and when `spring.current` catches up to it.
   *
   * If `options.instant` is `true`, `spring.current` immediately matches `spring.target`.
   *
   * If `options.preserveMomentum` is provided, the spring will continue on its current trajectory for
   * the specified number of milliseconds. This is useful for things like 'fling' gestures.
   *
   * @param {T} value
   * @param {SpringUpdateOpts} [options]
   */
  set(value, options) {
    var _a, _b;
    (_a = __privateGet(this, _deferred)) == null ? void 0 : _a.reject(new Error("Aborted"));
    if ((options == null ? void 0 : options.instant) || __privateGet(this, _current).v === void 0) {
      (_b = __privateGet(this, _task)) == null ? void 0 : _b.abort();
      __privateSet(this, _task, null);
      set(__privateGet(this, _current), set(__privateGet(this, _target), value));
      __privateSet(this, _last_value, value);
      return Promise.resolve();
    }
    if (options == null ? void 0 : options.preserveMomentum) {
      __privateSet(this, _inverse_mass, 0);
      __privateSet(this, _momentum, options.preserveMomentum);
    }
    var d = __privateSet(this, _deferred, deferred());
    d.promise.catch(noop);
    __privateMethod(this, _update, update_fn).call(this, value).then(() => {
      if (d !== __privateGet(this, _deferred))
        return;
      d.resolve(void 0);
    });
    return d.promise;
  }
  get current() {
    return get(__privateGet(this, _current));
  }
  get damping() {
    return get(__privateGet(this, _damping));
  }
  set damping(v) {
    set(__privateGet(this, _damping), clamp(v, 0, 1));
  }
  get precision() {
    return get(__privateGet(this, _precision));
  }
  set precision(v) {
    set(__privateGet(this, _precision), v);
  }
  get stiffness() {
    return get(__privateGet(this, _stiffness));
  }
  set stiffness(v) {
    set(__privateGet(this, _stiffness), clamp(v, 0, 1));
  }
  get target() {
    return get(__privateGet(this, _target));
  }
  set target(v) {
    this.set(v);
  }
};
_stiffness = new WeakMap();
_damping = new WeakMap();
_precision = new WeakMap();
_current = new WeakMap();
_target = new WeakMap();
_last_value = new WeakMap();
_last_time = new WeakMap();
_inverse_mass = new WeakMap();
_momentum = new WeakMap();
_task = new WeakMap();
_deferred = new WeakMap();
_update = new WeakSet();
update_fn = function(value) {
  var _a;
  set(__privateGet(this, _target), value);
  (_a = __privateGet(this, _current)).v ?? (_a.v = value);
  __privateGet(this, _last_value) ?? __privateSet(this, _last_value, __privateGet(this, _current).v);
  if (!__privateGet(this, _task)) {
    __privateSet(this, _last_time, raf.now());
    var inv_mass_recovery_rate = 1e3 / (__privateGet(this, _momentum) * 60);
    __privateGet(this, _task) ?? __privateSet(this, _task, loop((now) => {
      __privateSet(this, _inverse_mass, Math.min(__privateGet(this, _inverse_mass) + inv_mass_recovery_rate, 1));
      const ctx = {
        inv_mass: __privateGet(this, _inverse_mass),
        opts: {
          stiffness: __privateGet(this, _stiffness).v,
          damping: __privateGet(this, _damping).v,
          precision: __privateGet(this, _precision).v
        },
        settled: true,
        dt: (now - __privateGet(this, _last_time)) * 60 / 1e3
      };
      var next = tick_spring(ctx, __privateGet(this, _last_value), __privateGet(this, _current).v, __privateGet(this, _target).v);
      __privateSet(this, _last_value, __privateGet(this, _current).v);
      __privateSet(this, _last_time, now);
      set(__privateGet(this, _current), next);
      if (ctx.settled) {
        __privateSet(this, _task, null);
      }
      return !ctx.settled;
    }));
  }
  return __privateGet(this, _task).promise;
};
var Spring = _Spring;
function clamp(n, min, max) {
  return Math.max(min, Math.min(max, n));
}

// node_modules/svelte/src/motion/tweened.js
function get_interpolator(a, b) {
  if (a === b || a !== a)
    return () => a;
  const type = typeof a;
  if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
    throw new Error("Cannot interpolate values of different type");
  }
  if (Array.isArray(a)) {
    const arr = (
      /** @type {Array<any>} */
      b.map((bi, i) => {
        return get_interpolator(
          /** @type {Array<any>} */
          a[i],
          bi
        );
      })
    );
    return (t) => arr.map((fn) => fn(t));
  }
  if (type === "object") {
    if (!a || !b) {
      throw new Error("Object cannot be null");
    }
    if (is_date(a) && is_date(b)) {
      const an = a.getTime();
      const bn = b.getTime();
      const delta = bn - an;
      return (t) => new Date(an + t * delta);
    }
    const keys = Object.keys(b);
    const interpolators = {};
    keys.forEach((key) => {
      interpolators[key] = get_interpolator(a[key], b[key]);
    });
    return (t) => {
      const result = {};
      keys.forEach((key) => {
        result[key] = interpolators[key](t);
      });
      return result;
    };
  }
  if (type === "number") {
    const delta = (
      /** @type {number} */
      b - /** @type {number} */
      a
    );
    return (t) => a + t * delta;
  }
  throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
  const store = writable(value);
  let task;
  let target_value = value;
  function set2(new_value, opts) {
    target_value = new_value;
    if (value == null) {
      store.set(value = new_value);
      return Promise.resolve();
    }
    let previous_task = task;
    let started = false;
    let {
      delay = 0,
      duration = 400,
      easing = linear,
      interpolate = get_interpolator
    } = { ...defaults, ...opts };
    if (duration === 0) {
      if (previous_task) {
        previous_task.abort();
        previous_task = null;
      }
      store.set(value = target_value);
      return Promise.resolve();
    }
    const start = raf.now() + delay;
    let fn;
    task = loop((now) => {
      if (now < start)
        return true;
      if (!started) {
        fn = interpolate(
          /** @type {any} */
          value,
          new_value
        );
        if (typeof duration === "function")
          duration = duration(
            /** @type {any} */
            value,
            new_value
          );
        started = true;
      }
      if (previous_task) {
        previous_task.abort();
        previous_task = null;
      }
      const elapsed = now - start;
      if (elapsed > /** @type {number} */
      duration) {
        store.set(value = new_value);
        return false;
      }
      store.set(value = fn(easing(elapsed / duration)));
      return true;
    });
    return task.promise;
  }
  return {
    set: set2,
    update: (fn, opts) => set2(fn(
      /** @type {any} */
      target_value,
      /** @type {any} */
      value
    ), opts),
    subscribe: store.subscribe
  };
}
var _current2, _target2, _defaults, _task2;
var _Tween = class _Tween {
  /**
   * @param {T} value
   * @param {TweenedOptions<T>} options
   */
  constructor(value, options = {}) {
    __privateAdd(this, _current2, source(
      /** @type {T} */
      void 0
    ));
    __privateAdd(this, _target2, source(
      /** @type {T} */
      void 0
    ));
    /** @type {TweenedOptions<T>} */
    __privateAdd(this, _defaults, void 0);
    /** @type {import('../internal/client/types').Task | null} */
    __privateAdd(this, _task2, null);
    __privateGet(this, _current2).v = __privateGet(this, _target2).v = value;
    __privateSet(this, _defaults, options);
  }
  /**
   * Create a tween whose value is bound to the return value of `fn`. This must be called
   * inside an effect root (for example, during component initialisation).
   *
   * ```svelte
   * <script>
   * 	import { Tween } from 'svelte/motion';
   *
   * 	let { number } = $props();
   *
   * 	const tween = Tween.of(() => number);
   * <\/script>
   * ```
   * @template U
   * @param {() => U} fn
   * @param {TweenedOptions<U>} [options]
   */
  static of(fn, options) {
    const tween = new _Tween(fn(), options);
    render_effect(() => {
      tween.set(fn());
    });
    return tween;
  }
  /**
   * Sets `tween.target` to `value` and returns a `Promise` that resolves if and when `tween.current` catches up to it.
   *
   * If `options` are provided, they will override the tween's defaults.
   * @param {T} value
   * @param {TweenedOptions<T>} [options]
   * @returns
   */
  set(value, options) {
    set(__privateGet(this, _target2), value);
    let previous_task = __privateGet(this, _task2);
    let started = false;
    let {
      delay = 0,
      duration = 400,
      easing = linear,
      interpolate = get_interpolator
    } = { ...__privateGet(this, _defaults), ...options };
    const start = raf.now() + delay;
    let fn;
    __privateSet(this, _task2, loop((now) => {
      if (now < start) {
        return true;
      }
      if (!started) {
        started = true;
        const prev = __privateGet(this, _current2).v;
        fn = interpolate(prev, value);
        if (typeof duration === "function") {
          duration = duration(prev, value);
        }
        previous_task == null ? void 0 : previous_task.abort();
      }
      const elapsed = now - start;
      if (elapsed > /** @type {number} */
      duration) {
        set(__privateGet(this, _current2), value);
        return false;
      }
      set(__privateGet(this, _current2), fn(easing(elapsed / /** @type {number} */
      duration)));
      return true;
    }));
    return __privateGet(this, _task2).promise;
  }
  get current() {
    return get(__privateGet(this, _current2));
  }
  get target() {
    return get(__privateGet(this, _target2));
  }
  set target(v) {
    this.set(v);
  }
};
_current2 = new WeakMap();
_target2 = new WeakMap();
_defaults = new WeakMap();
_task2 = new WeakMap();
var Tween = _Tween;

// node_modules/svelte/src/motion/index.js
var prefersReducedMotion = new MediaQuery(
  "(prefers-reduced-motion: reduce)"
);
export {
  Spring,
  Tween,
  prefersReducedMotion,
  spring,
  tweened
};
//# sourceMappingURL=svelte_motion.js.map
